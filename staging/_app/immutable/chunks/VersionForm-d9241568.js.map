{"version":3,"file":"VersionForm-d9241568.js","sources":["../../../../../../src/lib/models/versions.ts","../../../../../../src/lib/components/versions/VersionForm.svelte"],"sourcesContent":["import * as zod from 'zod';\nimport JSZip from 'jszip';\nimport { validateUPluginJson } from '$lib/utils/uplugin';\nimport type { Writable } from 'svelte/store';\nimport type { ZodObject, ZodRawShape } from 'zod';\nimport type { File } from '$lib/models/file';\nimport type { VersionStabilities } from '$lib/generated';\n\nexport type VersionData = {\n  file: File;\n  changelog: string;\n  stability: VersionStabilities;\n};\n\nexport type VersionMetadata = {\n  uplugin: {\n    Version: string;\n    SemVersion?: string;\n    Plugins?: {\n      Name: string;\n      SemVersion?: string;\n    }[];\n  };\n  objects: string[];\n};\n\nconst validateUPluginJsonModZip = async (\n  zip: JSZip,\n  uPluginJsonFile: JSZip.JSZipObject,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> =>\n  uPluginJsonFile\n    .async('string')\n    .then(async (uPluginJson) => {\n      const result = await validateUPluginJson(uPluginJson);\n\n      if (result.length != 0) {\n        return {\n          message: `invalid ${modReference}.uplugin`,\n          extended: result\n        };\n      }\n\n      const parsed = JSON.parse(uPluginJson);\n\n      let foundSML = false;\n      for (const dependency of parsed.Plugins) {\n        if (dependency.Name === 'SML') {\n          foundSML = true;\n          break;\n        }\n      }\n\n      if (!foundSML) {\n        return {\n          message: 'mod must depend on SML'\n        };\n      }\n\n      return {\n        uplugin: parsed,\n        objects: Object.keys(zip.files).filter((f) => f.endsWith('.dll') || f.endsWith('.pak'))\n      };\n    })\n    .catch((err) => ({\n      message: `invalid ${modReference}.uplugin: ${err}`\n    }));\n\nconst validateModZip = async (\n  file: unknown,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  const zipper = new JSZip();\n  return (\n    zipper\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .loadAsync(file as any)\n      .then((zip) => {\n        const uPluginJsonFile = zip.file(modReference + '.uplugin');\n        if (uPluginJsonFile) {\n          return validateUPluginJsonModZip(zip, uPluginJsonFile, modReference);\n        }\n\n        return {\n          message: modReference + '.uplugin missing from mod'\n        };\n      })\n      .catch((err) => ({\n        message: 'invalid zip/smod file: ' + err\n      }))\n  );\n};\n\nexport const constructVersionSchema = (\n  modReference: string,\n  modMetadata: Writable<VersionMetadata>\n): ZodObject<ZodRawShape> =>\n  zod.object({\n    file: zod.optional(\n      zod.any().superRefine(async (file, ctx) => {\n        if (!('name' in file && 'size' in file && 'type' in file)) {\n          ctx.addIssue({\n            message: 'Unknown file error',\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        const result = await validateModZip(file, modReference);\n\n        if ('message' in result) {\n          ctx.addIssue({\n            message: result.message as string,\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        modMetadata.set(result as VersionMetadata);\n      })\n    ),\n    changelog: zod.string(),\n    stability: zod.string()\n  });\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { svelteReporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { VersionData, VersionMetadata } from '$lib/models/versions';\n  import { constructVersionSchema } from '$lib/models/versions';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import { writable } from 'svelte/store';\n  import Textfield from '@smui/textfield';\n  import Button from '@smui/button';\n  import { VersionStabilities } from '$lib/generated';\n  import Select, { Option } from '@smui/select';\n  import { prettyBytes } from '$lib/utils/formatting';\n\n  export let modReference: string;\n  export let onSubmit: (data: VersionData) => Promise<void>;\n  export let initialValues: Omit<VersionData, 'file'> = {\n    changelog: '',\n    stability: VersionStabilities.Alpha\n  };\n  export let submitText = 'Create';\n\n  export let editing = false;\n\n  const modMeta = writable<VersionMetadata>();\n\n  let disabled = false;\n\n  const versionSchema = constructVersionSchema(modReference, modMeta);\n  const { form, data } = createForm<VersionData>({\n    initialValues: initialValues as VersionData,\n    extend: [validator, svelteReporter],\n    validateSchema: versionSchema,\n    onSubmit: (submitted: VersionData) => {\n      disabled = true;\n      onSubmit(trimNonSchema(submitted, versionSchema)).then(() => (disabled = false));\n    }\n  });\n\n  $: preview = ($data.changelog as string) || '';\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <Select bind:value={$data.stability} label=\"Stability\">\n        <Option value=\"alpha\">Alpha</Option>\n        <Option value=\"beta\">Beta</Option>\n        <Option value=\"release\">Release</Option>\n      </Select>\n      <ValidationMessage for=\"stability\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    {#if !editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <label for=\"file\">File:</label>\n        <input id=\"file\" class=\"base-input\" name=\"file\" type=\"file\" accept=\".zip,.smod\" placeholder=\"File\" />\n        <ValidationMessage for=\"file\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n\n      {#if $data.file}\n        <div>\n          <span><strong>File Type:</strong> {$data.file.type || 'Unknown'}</span><br />\n          <span><strong>File Size:</strong> {prettyBytes($data.file.size)}</span>\n        </div>\n      {/if}\n\n      {#if $modMeta}\n        <div>\n          <p class=\"mb-4\">\n            <span><strong>Version:</strong> {$modMeta.uplugin.Version}<br /></span>\n\n            {#if $modMeta.uplugin.SemVersion !== undefined}\n              <span><strong>SemVersion:</strong> {$modMeta.uplugin.SemVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                Mod is missing SemVersion field! Are you sure you want to continue? Your version will be set to {$modMeta\n                  .uplugin.Version}.0.0\n              </span>\n            {/if}\n          </p>\n\n          {#if $modMeta.uplugin.Plugins !== undefined}\n            <p>\n              <strong>Dependencies:</strong><br />\n              {#each $modMeta.uplugin.Plugins as dependency}\n                <strong>{dependency.Name}: </strong>\n                {#if dependency.SemVersion}\n                  <span>{dependency.SemVersion}</span>\n                {:else}\n                  <span>*</span>\n                {/if}\n                <br />\n              {/each}\n            </p>\n          {/if}\n\n          {#if $modMeta.objects && $modMeta.objects.length > 0}\n            <p>\n              <strong>Objects:</strong><br />\n              {#each $modMeta.objects as object}\n                <span>{object}</span>\n                <br />\n              {/each}\n            </p>\n          {:else}\n            <p>\n              <span class=\"text-yellow-600\">\n                Mod contains no objects (.dll, .pak)! Are you sure you want to continue?\n              </span>\n            </p>\n          {/if}\n        </div>\n      {/if}\n    {/if}\n\n    <div class=\"grid gap-6 split\">\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <Textfield\n          textarea\n          class=\"vertical-textarea\"\n          bind:value={$data.changelog}\n          label=\"Changelog\"\n          required\n          input$rows={10} />\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <span>Preview:</span>\n        {#await markdown(preview) then previewRendered}\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div>\n      <Button variant=\"outlined\" type=\"submit\" {disabled}>{submitText}</Button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n</style>\n"],"names":["validateUPluginJsonModZip","async","zip","uPluginJsonFile","modReference","then","uPluginJson","result","validateUPluginJson","length","message","extended","parsed","JSON","parse","foundSML","dependency","Plugins","Name","uplugin","objects","Object","keys","files","filter","f","endsWith","catch","err","validateModZip","file","zipper","JSZip","loadAsync","constructVersionSchema","modMetadata","zod.object","zod.optional","zod.any","superRefine","ctx","addIssue","code","zod.ZodIssueCode","custom","set","changelog","zod.string","stability","t_value","insert_hydration_dev","target","span","anchor","dirty","set_data_dev","t","if_block0","create_if_block_6","create_if_block_1","div","append_hydration_dev","label","input","t2_value","type","t6_value","prettyBytes","size","span0","strong0","br","span1","strong1","t2","t6","Version","SemVersion","undefined","create_if_block_5","if_block1","create_if_block_3","create_if_block_2","p","strong","t1","t1_value","i","t0_value","create_if_block_4","t0","each_value","innerHTML","raw_value","select_props","value","create_if_block","textfield_props","handle_promise","promise","markdown","info","form_1","div5","div0","div3","div1","div2","div4","select_changes","textfield_changes","$$props","onSubmit","initialValues","VersionStabilities","Alpha","submitText","editing","modMeta","writable","disabled","versionSchema","form","data","createForm","extend","validator","svelteReporter","validateSchema","submitted","$$invalidate","trimNonSchema","$$self","$$","not_equal","$data","preview"],"mappings":"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"}